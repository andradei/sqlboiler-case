// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Thing is an object representing the database table.
type Thing struct {
	ID       int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	BoughtOn null.Time `boil:"bought_on" json:"bought_on,omitempty" toml:"bought_on" yaml:"bought_on,omitempty"`

	R *thingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L thingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ThingColumns = struct {
	ID       string
	Name     string
	BoughtOn string
}{
	ID:       "id",
	Name:     "name",
	BoughtOn: "bought_on",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ThingWhere = struct {
	ID       whereHelperint
	Name     whereHelperstring
	BoughtOn whereHelpernull_Time
}{
	ID:       whereHelperint{field: `id`},
	Name:     whereHelperstring{field: `name`},
	BoughtOn: whereHelpernull_Time{field: `bought_on`},
}

// ThingRels is where relationship names are stored.
var ThingRels = struct {
	Persons string
}{
	Persons: "Persons",
}

// thingR is where relationships are stored.
type thingR struct {
	Persons PersonSlice
}

// NewStruct creates a new relationship struct
func (*thingR) NewStruct() *thingR {
	return &thingR{}
}

// thingL is where Load methods for each relationship are stored.
type thingL struct{}

var (
	thingColumns               = []string{"id", "name", "bought_on"}
	thingColumnsWithoutDefault = []string{"name", "bought_on"}
	thingColumnsWithDefault    = []string{"id"}
	thingPrimaryKeyColumns     = []string{"id"}
)

type (
	// ThingSlice is an alias for a slice of pointers to Thing.
	// This should generally be used opposed to []Thing.
	ThingSlice []*Thing
	// ThingHook is the signature for custom Thing hook methods
	ThingHook func(context.Context, boil.ContextExecutor, *Thing) error

	thingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	thingType                 = reflect.TypeOf(&Thing{})
	thingMapping              = queries.MakeStructMapping(thingType)
	thingPrimaryKeyMapping, _ = queries.BindMapping(thingType, thingMapping, thingPrimaryKeyColumns)
	thingInsertCacheMut       sync.RWMutex
	thingInsertCache          = make(map[string]insertCache)
	thingUpdateCacheMut       sync.RWMutex
	thingUpdateCache          = make(map[string]updateCache)
	thingUpsertCacheMut       sync.RWMutex
	thingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var thingBeforeInsertHooks []ThingHook
var thingBeforeUpdateHooks []ThingHook
var thingBeforeDeleteHooks []ThingHook
var thingBeforeUpsertHooks []ThingHook

var thingAfterInsertHooks []ThingHook
var thingAfterSelectHooks []ThingHook
var thingAfterUpdateHooks []ThingHook
var thingAfterDeleteHooks []ThingHook
var thingAfterUpsertHooks []ThingHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Thing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Thing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Thing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Thing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Thing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Thing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Thing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Thing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Thing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range thingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddThingHook registers your hook function for all future operations.
func AddThingHook(hookPoint boil.HookPoint, thingHook ThingHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		thingBeforeInsertHooks = append(thingBeforeInsertHooks, thingHook)
	case boil.BeforeUpdateHook:
		thingBeforeUpdateHooks = append(thingBeforeUpdateHooks, thingHook)
	case boil.BeforeDeleteHook:
		thingBeforeDeleteHooks = append(thingBeforeDeleteHooks, thingHook)
	case boil.BeforeUpsertHook:
		thingBeforeUpsertHooks = append(thingBeforeUpsertHooks, thingHook)
	case boil.AfterInsertHook:
		thingAfterInsertHooks = append(thingAfterInsertHooks, thingHook)
	case boil.AfterSelectHook:
		thingAfterSelectHooks = append(thingAfterSelectHooks, thingHook)
	case boil.AfterUpdateHook:
		thingAfterUpdateHooks = append(thingAfterUpdateHooks, thingHook)
	case boil.AfterDeleteHook:
		thingAfterDeleteHooks = append(thingAfterDeleteHooks, thingHook)
	case boil.AfterUpsertHook:
		thingAfterUpsertHooks = append(thingAfterUpsertHooks, thingHook)
	}
}

// One returns a single thing record from the query.
func (q thingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Thing, error) {
	o := &Thing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for things")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Thing records from the query.
func (q thingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ThingSlice, error) {
	var o []*Thing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Thing slice")
	}

	if len(thingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Thing records in the query.
func (q thingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count things rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q thingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if things exists")
	}

	return count > 0, nil
}

// Persons retrieves all the person's Persons with an executor.
func (o *Thing) Persons(mods ...qm.QueryMod) personQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"persons_things\" on \"persons\".\"id\" = \"persons_things\".\"person_id\""),
		qm.Where("\"persons_things\".\"thing_id\"=?", o.ID),
	)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "\"persons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"persons\".*"})
	}

	return query
}

// LoadPersons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (thingL) LoadPersons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeThing interface{}, mods queries.Applicator) error {
	var slice []*Thing
	var object *Thing

	if singular {
		object = maybeThing.(*Thing)
	} else {
		slice = *maybeThing.(*[]*Thing)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &thingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &thingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"persons\".*, \"a\".\"thing_id\""),
		qm.From("\"persons\""),
		qm.InnerJoin("\"persons_things\" as \"a\" on \"persons\".\"id\" = \"a\".\"person_id\""),
		qm.WhereIn("\"a\".\"thing_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load persons")
	}

	var resultSlice []*Person

	var localJoinCols []int
	for results.Next() {
		one := new(Person)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Age, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for persons")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice persons")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(personAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Persons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personR{}
			}
			foreign.R.Things = append(foreign.R.Things, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Persons = append(local.R.Persons, foreign)
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.Things = append(foreign.R.Things, local)
				break
			}
		}
	}

	return nil
}

// AddPersons adds the given related objects to the existing relationships
// of the thing, optionally inserting them as new records.
// Appends related to o.R.Persons.
// Sets related.R.Things appropriately.
func (o *Thing) AddPersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"persons_things\" (\"thing_id\", \"person_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &thingR{
			Persons: related,
		}
	} else {
		o.R.Persons = append(o.R.Persons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personR{
				Things: ThingSlice{o},
			}
		} else {
			rel.R.Things = append(rel.R.Things, o)
		}
	}
	return nil
}

// SetPersons removes all previously related items of the
// thing replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Things's Persons accordingly.
// Replaces o.R.Persons with related.
// Sets related.R.Things's Persons accordingly.
func (o *Thing) SetPersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	query := "delete from \"persons_things\" where \"thing_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePersonsFromThingsSlice(o, related)
	if o.R != nil {
		o.R.Persons = nil
	}
	return o.AddPersons(ctx, exec, insert, related...)
}

// RemovePersons relationships from objects passed in.
// Removes related items from R.Persons (uses pointer comparison, removal does not keep order)
// Sets related.R.Things.
func (o *Thing) RemovePersons(ctx context.Context, exec boil.ContextExecutor, related ...*Person) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"persons_things\" where \"thing_id\" = $1 and \"person_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePersonsFromThingsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Persons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Persons)
			if ln > 1 && i < ln-1 {
				o.R.Persons[i] = o.R.Persons[ln-1]
			}
			o.R.Persons = o.R.Persons[:ln-1]
			break
		}
	}

	return nil
}

func removePersonsFromThingsSlice(o *Thing, related []*Person) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Things {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Things)
			if ln > 1 && i < ln-1 {
				rel.R.Things[i] = rel.R.Things[ln-1]
			}
			rel.R.Things = rel.R.Things[:ln-1]
			break
		}
	}
}

// Things retrieves all the records using an executor.
func Things(mods ...qm.QueryMod) thingQuery {
	mods = append(mods, qm.From("\"things\""))
	return thingQuery{NewQuery(mods...)}
}

// FindThing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindThing(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Thing, error) {
	thingObj := &Thing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"things\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, thingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from things")
	}

	return thingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Thing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no things provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(thingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	thingInsertCacheMut.RLock()
	cache, cached := thingInsertCache[key]
	thingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			thingColumns,
			thingColumnsWithDefault,
			thingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(thingType, thingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(thingType, thingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"things\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"things\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into things")
	}

	if !cached {
		thingInsertCacheMut.Lock()
		thingInsertCache[key] = cache
		thingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Thing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Thing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	thingUpdateCacheMut.RLock()
	cache, cached := thingUpdateCache[key]
	thingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			thingColumns,
			thingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update things, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"things\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, thingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(thingType, thingMapping, append(wl, thingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update things row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for things")
	}

	if !cached {
		thingUpdateCacheMut.Lock()
		thingUpdateCache[key] = cache
		thingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q thingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for things")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for things")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ThingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"things\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, thingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in thing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all thing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Thing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no things provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(thingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	thingUpsertCacheMut.RLock()
	cache, cached := thingUpsertCache[key]
	thingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			thingColumns,
			thingColumnsWithDefault,
			thingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			thingColumns,
			thingPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert things, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(thingPrimaryKeyColumns))
			copy(conflict, thingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"things\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(thingType, thingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(thingType, thingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert things")
	}

	if !cached {
		thingUpsertCacheMut.Lock()
		thingUpsertCache[key] = cache
		thingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Thing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Thing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Thing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), thingPrimaryKeyMapping)
	sql := "DELETE FROM \"things\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from things")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for things")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q thingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no thingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from things")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for things")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ThingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Thing slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(thingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"things\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, thingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from thing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for things")
	}

	if len(thingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Thing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindThing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ThingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ThingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), thingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"things\".* FROM \"things\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, thingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ThingSlice")
	}

	*o = slice

	return nil
}

// ThingExists checks if the Thing row exists.
func ThingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"things\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if things exists")
	}

	return exists, nil
}
