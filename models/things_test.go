// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testThings(t *testing.T) {
	t.Parallel()

	query := Things()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testThingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Things().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ThingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Thing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ThingExists to return true, but got false.")
	}
}

func testThingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	thingFound, err := FindThing(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if thingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testThingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Things().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testThingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Things().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testThingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	thingOne := &Thing{}
	thingTwo := &Thing{}
	if err = randomize.Struct(seed, thingOne, thingDBTypes, false, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}
	if err = randomize.Struct(seed, thingTwo, thingDBTypes, false, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Things().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testThingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	thingOne := &Thing{}
	thingTwo := &Thing{}
	if err = randomize.Struct(seed, thingOne, thingDBTypes, false, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}
	if err = randomize.Struct(seed, thingTwo, thingDBTypes, false, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func thingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func thingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Thing) error {
	*o = Thing{}
	return nil
}

func testThingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Thing{}
	o := &Thing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, thingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Thing object: %s", err)
	}

	AddThingHook(boil.BeforeInsertHook, thingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	thingBeforeInsertHooks = []ThingHook{}

	AddThingHook(boil.AfterInsertHook, thingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	thingAfterInsertHooks = []ThingHook{}

	AddThingHook(boil.AfterSelectHook, thingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	thingAfterSelectHooks = []ThingHook{}

	AddThingHook(boil.BeforeUpdateHook, thingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	thingBeforeUpdateHooks = []ThingHook{}

	AddThingHook(boil.AfterUpdateHook, thingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	thingAfterUpdateHooks = []ThingHook{}

	AddThingHook(boil.BeforeDeleteHook, thingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	thingBeforeDeleteHooks = []ThingHook{}

	AddThingHook(boil.AfterDeleteHook, thingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	thingAfterDeleteHooks = []ThingHook{}

	AddThingHook(boil.BeforeUpsertHook, thingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	thingBeforeUpsertHooks = []ThingHook{}

	AddThingHook(boil.AfterUpsertHook, thingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	thingAfterUpsertHooks = []ThingHook{}
}

func testThingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(thingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThingToManyPersons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Thing
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"persons_things\" (\"thing_id\", \"person_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"persons_things\" (\"thing_id\", \"person_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Persons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ThingSlice{&a}
	if err = a.L.LoadPersons(ctx, tx, false, (*[]*Thing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Persons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Persons = nil
	if err = a.L.LoadPersons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Persons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testThingToManyAddOpPersons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Thing
	var b, c, d, e Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, thingDBTypes, false, strmangle.SetComplement(thingPrimaryKeyColumns, thingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Person{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Person{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPersons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Things[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Things[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Persons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Persons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Persons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testThingToManySetOpPersons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Thing
	var b, c, d, e Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, thingDBTypes, false, strmangle.SetComplement(thingPrimaryKeyColumns, thingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Person{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPersons(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Persons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPersons(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Persons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Things) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Things) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Things[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Things[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Persons[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Persons[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testThingToManyRemoveOpPersons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Thing
	var b, c, d, e Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, thingDBTypes, false, strmangle.SetComplement(thingPrimaryKeyColumns, thingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Person{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPersons(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Persons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePersons(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Persons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Things) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Things) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Things[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Things[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Persons) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Persons[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Persons[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testThingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Things().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	thingDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `BoughtOn`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testThingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(thingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(thingColumns) == len(thingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thingDBTypes, true, thingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testThingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(thingColumns) == len(thingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Thing{}
	if err = randomize.Struct(seed, o, thingDBTypes, true, thingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thingDBTypes, true, thingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(thingColumns, thingPrimaryKeyColumns) {
		fields = thingColumns
	} else {
		fields = strmangle.SetComplement(
			thingColumns,
			thingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ThingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testThingsUpsert(t *testing.T) {
	t.Parallel()

	if len(thingColumns) == len(thingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Thing{}
	if err = randomize.Struct(seed, &o, thingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Thing: %s", err)
	}

	count, err := Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, thingDBTypes, false, thingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Thing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Thing: %s", err)
	}

	count, err = Things().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
